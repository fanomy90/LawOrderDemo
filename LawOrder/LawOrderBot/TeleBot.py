from telebot import types, TeleBot
import os
from dotenv import load_dotenv
from pathlib import Path
import requests
import datetime
import django

from LawOrderParser.tasks import parsing
from LawOrderParser.task.sudact_parsing import parse_document

# –¥–ª—è —Ä–µ–¥–∏—Å–∫–∏
import uuid
import redis
import time
from LawOrderParser.utils.redis_client import redis_client

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "LawOrder.settings")


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")

if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TOKEN –≤ .env —Ñ–∞–π–ª–µ")

print(f'{datetime.datetime.now()} –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ {TOKEN}')
bot = TeleBot(TOKEN)

# def COMPANYLOOKUP(input):
#     response=UrlFetchApp.fetch("https://api.datanewton.ru/v1/counterparty?key=lMqXGnVMQAyn&filters=OWNER_BLOCK%2CADDRESS_BLOCK&inn="+input).getContentText();
#     return response;

# def COMPANYLOOKUP(input):
#     url = f"https://api.datanewton.ru/v1/counterparty?key=lMqXGnVMQAyn&filters=OWNER_BLOCK%2CADDRESS_BLOCK&inn={input}"
#     response = requests.get(url)
#     return response.text

def COMPANYLOOKUP(input):
    url = f"https://api.datanewton.ru/v1/counterparty?key=lMqXGnVMQAyn&filters=OWNER_BLOCK%2CADDRESS_BLOCK&inn={input}"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return response.text
    except requests.RequestException as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"

#–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(content_types=["text"])
def next_message(message):
    print(f"{datetime.datetime.now()} –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    #from news.models import TelegramSubscriber
    chat_id = message.chat.id
    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if message.text.lower() == '/law_order':
        keyboard_subcategory = types.InlineKeyboardMarkup(row_width=1)
        button1 = types.InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ—Ç–∞', callback_data='key1')
        button2 = types.InlineKeyboardButton('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –±–æ—Ç–∞', callback_data='key2')
        button3 = types.InlineKeyboardButton('–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä', callback_data='key3')
        keyboard_subcategory.add(button1, button2, button3)

        bot.send_message(chat_id, 
                    text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n–ù–æ–º–µ—Ä —á–∞—Ç–∞: {chat_id}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard_subcategory)            
    else:
        bot.send_message(message.chat.id, f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {message.text}")
        print(f"{datetime.datetime.now()} –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {message.text}")
#–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é2
@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    django.setup()
    from LawOrderParser.models import TelegramSubscriber
    chat_id = call.message.chat.id
    username = call.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if call.data == 'key0':
        keyboard_category = types.InlineKeyboardMarkup(row_width=1)
        keyboard_category.add(types.InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ—Ç–∞', callback_data='key1'),
                        types.InlineKeyboardButton('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –±–æ—Ç–∞', callback_data='key2'),
                        types.InlineKeyboardButton('–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä', callback_data='key3'))
        bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é', chat_id, call.message.message_id, reply_markup=keyboard_category)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞
    elif call.data == 'key1':
        keyboard_category = types.InlineKeyboardMarkup(row_width=1)
        keyboard_category.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='key0'))
        
        subscriber, created = TelegramSubscriber.objects.get_or_create(
            chat_id=chat_id, 
            defaults={'username': username}
        )
        message_text = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –±–æ—Ç–∞ –∫–∞–∫ {subscriber}." if created else "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞ –∫–∞–∫ {subscriber}, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        bot.edit_message_text(message_text, chat_id, call.message.message_id, reply_markup=keyboard_category)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –±–æ—Ç–∞
    elif call.data == 'key2':
        keyboard_category = types.InlineKeyboardMarkup(row_width=1)
        keyboard_category.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='key0'))
        
        deleted_count, _ = TelegramSubscriber.objects.filter(chat_id=chat_id).delete()
        message_text = "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –±–æ—Ç–∞." if deleted_count > 0 else "–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞, –æ—Ç–ø–∏—Å–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞."
        bot.edit_message_text(message_text, chat_id, call.message.message_id, reply_markup=keyboard_category)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
    elif call.data == 'key3':
        keyboard_category = types.InlineKeyboardMarkup(row_width=1)
        keyboard_category.add(
            types.InlineKeyboardButton('–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä', callback_data='key3'),
            types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='key0')
            )
        bot.edit_message_text("‚è≥ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...", chat_id, call.message.message_id, reply_markup=keyboard_category)

        result = parsing.apply(kwargs={"mode": "manual"}).get(timeout=60)
        if not result:
            result = {"ok": False, "message": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"}


        message_text = result.get("message", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        final_keyboard = types.InlineKeyboardMarkup(row_width=1)


        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if result.get("ok") and result.get("buttons"):
            for button_text, redis_key in result["buttons"]:
                final_keyboard.add(types.InlineKeyboardButton(button_text, callback_data=redis_key))
        else:
            final_keyboard = keyboard_category  # fallback
        bot.edit_message_text(message_text, chat_id, call.message.message_id, reply_markup=final_keyboard)
        # message_text = "–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞..."
        # bot.edit_message_text(message_text, chat_id, call.message.message_id, reply_markup=keyboard_category)
        # parsing.delay(mode="manual", chat_id=call.message.chat.id, message_id=call.message.message_id)

    # –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω–µ—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    if call.data.startswith("doc_link:"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á
        redis_key = call.data
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑ Redis

        url = redis_client.get(redis_key)
        if isinstance(url, bytes):
            url = url.decode("utf-8")
            print(f"üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å—Å—ã–ª–∫—É: {url}")
            bot.answer_callback_query(call.id, text="–°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!")
            bot.send_message(chat_id, f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç:\n{url}")
        else:
            print(f"‚ùå –ö–ª—é—á {redis_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª")
            bot.answer_callback_query(call.id, text="‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç—ë–∫.")
            bot.send_message(chat_id, "‚ùå –°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return  # –≤—ã—Ö–æ–¥, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∞–ª—å—à–µ

#–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ supervisord
def run_bot():
    now = datetime.datetime.now()
    print(f"{now} –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    try:
        # –ó–∞–ø—É—Å–∫ polling —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Ç–∞–π–º-–∞—É—Ç–æ–≤
        bot.polling(none_stop=True, timeout=60, long_polling_timeout=60)
    except Exception as e:
        now = datetime.datetime.now()
        print(f"{now} –û—à–∏–±–∫–∞: {e}")
if __name__ == "__main__":
    run_bot()