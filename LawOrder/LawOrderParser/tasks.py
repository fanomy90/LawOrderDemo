# import sys
# sys.path.append('/yt')
import os
from django.conf import settings
import time
from celery import shared_task
# from LawOrderParser.task.sudact_parsing import sudact_find
from celery.utils.log import get_task_logger
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'LawOrder.settings')
import django

# –¥–ª—è —Ä–µ–¥–∏—Å–∫–∏
import uuid
import redis
from LawOrderParser.utils.redis_client import redis_client
# from LawOrderParser.task.sudact_parsing import parse_document
from LawOrderParser.task.sudact_parsing_doc import parse_document

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
r = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)

django.setup()
logger = get_task_logger(__name__)
# load_dotenv()
# TOKEN = os.getenv("TOKEN")

# –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
def save_temp_link(key, url, ttl_seconds=300):
    r.setex(key, ttl_seconds, url)
    print(f"–°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {key} ‚Üí {url} (–Ω–∞ {ttl_seconds} —Å–µ–∫)")

# –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
def get_temp_link(key):
    url = r.get(key)
    if url:
        print(f"–°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {key} ‚Üí {url}")
    else:
        print(f"–°—Å—ã–ª–∫–∞ –ø–æ –∫–ª—é—á—É {key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞")
    return url

@shared_task(bind=True)
def parsing(self, mode="manual"):
    #—Å—Ü–µ–Ω–∞—Ä–∏–π —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    from LawOrderParser.task.sudact_parsing import sudact_find
    import uuid
    try:
        result_message, parsed_items = sudact_find(mode=mode)
        if not parsed_items:
            print("–ø–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞—à–µ–ª –¥–∞–Ω–Ω—ã–µ")
            return {"ok": False, "message": result_message or "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."}
        
        # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä: (—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, redis_key)
        buttons = []
        for item in parsed_items:
            button_text = f"‚Ññ{item['number']}: {item['title'][:50]}"
            redis_key = f"doc_link:{uuid.uuid4()}"
            redis_client.setex(redis_key, 1800, item['url'])  # TTL 5 –º–∏–Ω—É—Ç
            print(f"–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ {button_text}, {redis_key}")
            buttons.append((button_text, redis_key))

        print("–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ parsing:", {
            "ok": True,
            "message": "...",
            "buttons": buttons
        })
        
        return {
            "ok": True,
            "message": "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            "buttons": buttons
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
        return {"ok": False, "message": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}"}

@shared_task(bind=True)
def test_read_redis_key(self, redis_key):
    try:
        print(f"üß™ –ü–æ–ª—É—á–µ–Ω –∫–ª—é—á: {redis_key}")
        value = redis_client.get(redis_key)

        if value is None:
            print(f"‚ùå –ö–ª—é—á {redis_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.")
            return {"ok": False, "message": f"‚ùå –ö–ª—é—á {redis_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis."}

        decoded_value = value.decode() if isinstance(value, bytes) else value
        print(f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É: {decoded_value}")
        return {"ok": True, "url": decoded_value, "redis_key": redis_key}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {str(e)}")
        return {"ok": False, "message": f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"}

# @shared_task(bind=True)
# def parsing_doc_task(self, redis_key, mode="manual"):
#     try:
#         print(f"üß™ –ü–æ–ª—É—á–µ–Ω –∫–ª—é—á: {redis_key}")
#         value = redis_client.get(redis_key)

#         if value is None:
#             print(f"‚ùå –ö–ª—é—á {redis_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.")
#             return {"ok": False, "message": f"‚ùå –ö–ª—é—á {redis_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis."}
#         decoded_value = value.decode() if isinstance(value, bytes) else value
#         # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞
#         document = parse_document(decoded_value, mode=mode)
        
#         return "doc"
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {str(e)}")
#         return {"ok": False, "message": f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"}

@shared_task(bind=True)
def parsing_doc_task(self, redis_key, mode="manual"):
    try:
        result = parse_document(redis_key, mode=mode)
        return result
    except Exception as e:
        return {"ok": False, "message": f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"}
